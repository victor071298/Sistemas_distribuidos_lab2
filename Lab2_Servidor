import os
import socket
import pickle


def top5(nome_do_arquivo):

    # dicionário vazio que armazenará as palavras e a quantidade de vezes que elas aparecem
    palavra_quantidade = {}
    # Checando se o arquivo existe
    if os.path.exists(nome_do_arquivo + '.txt'): #o path deve ser modificado dependendo de onde se encontra o arquivo na máquina do servidor
        with open(nome_do_arquivo + '.txt') as arquivo:
            for linha in arquivo.readlines():
                for palavra in linha.split(' '):
                    if palavra in palavra_quantidade:
                        palavra_quantidade[palavra] += 1
                    else:
                        palavra_quantidade[palavra] = 1
    else:
        print("Erro, arquivo não encontrado")
        falha = "O arquivo enviado não foi encontrado"
        return falha

    # Encontrando as 5 palavras mais frequentes
    palavras_mais_frequentes = []
    for i in range(5):
        maior_palavra = None # palavra mais encontrada
        maior_valor = 0 # contador da maior palavra

        for palavra, contagem in palavra_quantidade.items():
            if contagem > maior_valor:
                maior_palavra = palavra
                maior_valor = contagem

        palavras_mais_frequentes.append(maior_palavra)
        del palavra_quantidade[maior_palavra]

    # retornando as palavras encontradas
    return palavras_mais_frequentes

HOST = ''    # '' possibilita acessar qualquer endereco alcancavel da maquina local
PORTA = 5000  # porta onde chegarao as mensagens para essa aplicacao

# cria um socket para comunicacao
sock = socket.socket() # valores default: socket.AF_INET, socket.SOCK_STREAM  

# vincula a interface e porta para comunicacao
sock.bind((HOST, PORTA))

# define o limite maximo de conexoes pendentes e coloca-se em modo de espera por conexao
sock.listen(1) 

while True:

# aceita a primeira conexao da fila (chamada pode ser BLOQUEANTE)
    novoSock, endereco = sock.accept() # retorna um novo socket e o endereco do par conectado
    print ('Conectado com: ', endereco)
# depois de conectar-se, espera uma mensagem
    msg = pickle.loads(novoSock.recv(1024)) # argumento indica a qtde maxima de dados
    envio = top5(msg)
    print(str(envio))
    novoSock.send(pickle.dumps(envio))
    # fecha o socket da conexao
    novoSock.close()

# fecha o socket principal (nunca ocorre)
sock.close() 
